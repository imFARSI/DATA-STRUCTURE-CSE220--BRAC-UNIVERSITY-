# -*- coding: utf-8 -*-
"""Lab01_23101518.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nMp9FoT62z_41_RLAActt_ZyPDS6WVbM

**Instructions to Follow (Failing to follow these will result mark deductions).**
1. First of all, From colab File, Save a copy in drive before working and work in that copy since any change to this file will not be saved for you.
2. You can not use any built-in function except len()

3. You can not use any other python collections except array (e.g: tuple, dictionaries etc.).

4. We will initialize a new array using numpy library. We have to mention the fixed size during initialization. There might be 4 approaches.

 i. arr = np.array([None] * 10) #Initializing an array length 10 with values None.

 ii. arr = np.array([0] * 10) #Initializing an array length 10 with values zero.

 iii. arr = np.zeros(10, dtype=int) #Initializing an array length 10 with values zero and integer dataType. By default, dtype is float.

 iv. arr = np.array([10, 20, 30, 40]) #Initializing an array length 4 with the values.
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np



"""You will see the status Accepted after completion if your code is correct.

If your function is wrong you will see wrong [correction percentage]

Do not change the driver code statements. You can only change the input values to test your code.
"""

#Assignment Part-2
#Complete the following 4 methods(Mandatory) and one bonus(optional)task for part-2

#Task 01: Merge Lineup
def mergeLineup(pokemon_1, pokemon_2):
  result = np.array([0]*len(pokemon_1))
  k=len(pokemon_2)-1
  for i in range(len(result)):
    if pokemon_1[i] is None:
      pokemon_1[i]=0
    if pokemon_2[k] is None:
      pokemon_2[k]=0
    result[i]+=pokemon_1[i]+pokemon_2[k]
    k-=1
  return result


print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):
  count= 0
  for i in range(len(cards)):
    while cards[i]==t:
        if count%2==0:
            for j in range(i,len(cards)-1):
                cards[j] = cards[j+1]
            count+=1
        else:
            count+=1
            break
  return cards



print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

# Task 03: DUBER Fare Splitting
def findGroups(money, fare):
  # TO DO
  group = 0
  for i in range(len(money)):
    if money[i]==fare:
        group+=1
        print(f'Group{group} : {money[i]}')
        money[i] = 0
    else:
        for j in range(len(money)):
            if money[i]+money[j] == fare:
                group+=1
                print('Group',group,':',money[i],money[j])
                money[i] = 0
                money[j] = 0
  for i in money:
    if i!=0:
        print('Ungrouped :',end=" ")
        break
  for i in money:
    if i!=0:
        print(i,end=" ")
  # Print outputs inside the method

print("///  Task 03: DUBER Fare Splitting  ///")
money = np.array( [120, 100, 150, 50, 30])
fare = 150
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 120, 30
# Group 2 : 100, 50
# Group 3 : 150


money = np.array( [60, 150, 60, 30, 120, 30])
fare = 180
print(f'Task 3:')
findGroups(money, fare) # This should print

# Group 1 : 60, 120
# Group 2 : 30, 150
# Ungrouped : 30 60

#task4
def analyzeHobbies(* participants): #(* arguments) is used for variable number of parameters
  #TO DO
    count = 0
    total = 0
    first_participant = participants[0]
    for i in participants:
        for j in i:
            if j not in first_participant:
                count += 1
    count += len(first_participant)

    unique_hobbies = np.array([None] * count)
    total = 0
    for i in participants:
        for j in i:
            if j not in unique_hobbies:
                unique_hobbies[total] = j
                total += 1

    print(f"Unique Activities in the Town:\n{unique_hobbies}")
    print('Statistics:')
    for k in unique_hobbies:
        total = 0
        for i in participants:
            for j in i:
                if k == j:
                    total += 1
        print(f'{total} participant(s) like(s) {k}')
print("///  Task 04: Get Those Hobbies  ///")
participant_1 = np.array( ["Hiking", "Reading", "Photography", "Cooking"])
participant_2 = np.array( ["Reading", "Hiking", "Painting"])
participant_3 = np.array( ["Hiking", "Cooking", "Photography"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2, participant_3) #This should print

#Unique Activities in the Town:
#['Photography', 'Painting', 'Cooking', 'Reading', 'Hiking']

#Statistics:
#2 participant(s) like(s) Photography.
#1 participant(s) like(s) Painting.
#2 participant(s) like(s) Cooking.
#2 participant(s) like(s) Reading.
#3 participant(s) like(s) Hiking.



participant_1 = np.array( ["Gardening", "Traveling"])
participant_2 = np.array( ["Singing", "Gardening", "Painting"])
print(f'Task 4:')
analyzeHobbies(participant_1, participant_2) #This should print

#Unique Activities in the Town:
#[Gardening, Traveling, Singing, Painting]

#Statistics:
#2 participant(s) like(s) Gardening.
#1 participant(s) like(s) Traveling.
#1 participant(s) like(s) Singing.
#1 participant(s) like(s) Painting.





# Bonus Ungraded Task: Look and Say
def look_and_say(arr):
  #TO DO


print("///  Bonus Task: Look and Say  ///")
arr = np.array([1,3,1,1,2,2,2,1])
returned_value = look_and_say(arr)
print(f'Bonus Task: {returned_value}') # This should print [1,1,1,3,2,1,3,2,1,1]
#Hint: The size of the new array will never be more than 100.
#[You need not worry about the extra zeroes at the end of your resulting array]

"""For Assignment Part-1, you can create new code cells in the below and write your codes there. Also you should write driver codes to test your code for part-1."""

#Assignment Part-1
#Write 3 methods and driver codes for this part.
import numpy as np

def calculate_mean(x):
    count = 0
    total = 0
    for i in range(len(x)):
        total += x[i]
        count += 1
    return total / count

def calculate_standard_deviation(x):
    total = 0
    n = 0
    mean = calculate_mean(x)
    for i in range(len(x)):
        deviation = (x[i] - mean) ** 2
        total += deviation
        n += 1
    return np.sqrt(total / n)

def filter_outliers(x):
    sd = calculate_standard_deviation(x)
    threshold = 1.5 * sd
    upper_bound = calculate_mean(x) + threshold
    lower_bound = calculate_mean(x) - threshold
    count = 0
    count1 = 0
    for i in x:
        if i > upper_bound or i < lower_bound:
            count += 1
    new_array = np.array([0] * count)
    for i in range(len(x)):
        if x[i] > upper_bound or x[i] < lower_bound:
            new_array[count1] = x[i]
            count1 += 1
    return new_array

x = np.array([10, 8, 13, 9, 14, 25, -5, 20, 7, 7, 4])
print("The mean of the numbers is:", calculate_mean(x))
print("The standard deviation is:", calculate_standard_deviation(x))
print("Filtered array:", filter_outliers(x))



